import t from"fs";import{dirname as $}from"path";import g from"../lib/git-directories.js";import k from"../lib/package-types.js";import b from"../lib/packages.js";import h from"../options/node.js";const D=async m=>{for(const{path:e,name:r,workflow:w}of m)for(const[c,u]of await g(await b())){const o=c+"/.github",i=await w();if(e=="/workflows/"&&r=="node.yml")for(const a of u){const p=$(a).replace(c,""),y=(await t.promises.readFile(a)).toString(),d=(await k()).get(a.split("/").pop());if(typeof d<"u"&&d==="npm"){const s=JSON.parse(y);for(const n of["bundledDependencies","peerDependencies","peerDependenciesMeta","dependencies","optionalDependencies","devDependencies","extensionDependencies","bundleDependencies"])typeof s[n]<"u"&&i.add(`            - uses: actions/setup-node@v3.5.1
              with:
                  node-version: \${{ matrix.node-version }}
            - run: npm install
              working-directory: .${p}`);for(const n in s)if(Object.prototype.hasOwnProperty.call(s,n)){const f=s[n];if(n=="scripts")for(const l in f)Object.prototype.hasOwnProperty.call(f,l)&&l=="build"&&i.add(`
            - run: npm run build
              working-directory: .${p}
`)}}}if(i.size>0){try{await t.promises.mkdir(`${o}${e}`,{recursive:!0})}catch{console.log(`Could not create: ${o}${e}`)}try{await t.promises.writeFile(`${o}${e}${r}`,`${Array.from(i).join("")}`)}catch{console.log(`Could not create workflow for: ${o}/dependabot.yml`)}}else try{await t.promises.access(`${o}${e}${r}`,t.constants.F_OK);try{await t.promises.rm(`${o}${e}${r}`)}catch{console.log(`Could not remove ${e}${r} for: ${o}`)}}catch{}}};var J=()=>{D(h)};export{J as default};
