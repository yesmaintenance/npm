import { Octokit as i } from "@octokit/core";
import t from "../lib/env.js";
const c=async()=>{const r=t.GITHUB_USER,a=[],s=[],n=new i({auth:t.GITHUB_AUTH_TOKEN});for(const o of(await n.request(`GET /users/${r}/repos`)).data)s.push({owner:r,name:o.name});for(const o of(await n.request(`GET /users/${r}/orgs`)).data){a.push({name:o.login});for(const e of(await n.request(`GET /orgs/${o.login}/repos`)).data)s.push({owner:o.login,name:e.name})}for(const o of s)try{for(const e of(await n.request(`GET /repos/${o.owner}/${o.name}/actions/runs`,{owner:o.owner,repo:o.name})).data.workflow_runs){try{await n.request(`DELETE /repos/${o.owner}/${o.name}/actions/runs/${e.id}`,{owner:o.owner,repo:o.name,run_id:e.id}),console.log(`Deleted actions/runs/${e.id} for: ${o.name}`)}catch{console.log(`Could not delete actions/runs/${e.id} for: ${o.name}`)}try{await n.request(`DELETE /repos/${o.owner}/${o.name}/actions/runs/${e.id}/logs`,{owner:o.owner,repo:o.name,run_id:e.id}),console.log(`Deleted actions/runs/${e.id}/logs for: ${o.name}`)}catch{console.log(`Could not delete actions/runs/${e.id}/logs for: ${o.name}`)}}}catch{console.log(`Could not delete actions/runs and logs for: ${o.name}`)}};var d=c;export { d as default };

